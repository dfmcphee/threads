/*============================================================================
  Colors
==============================================================================*/

/*================ Palette ================*/
$default-color-palette-data: (
  white: (
    base: #fff
  ),

  black: (
    base: #000
  ),

  slate: (
    light: #454e57,
    base: #31373d,
    dark: #272c30
  ),

  sky: (
    light: #f5f6f7,
    base: #ebeef0,
    dark: #c3cfd8
  ),

  blue: (
    light: #2ea2d3,
    base: #247ba0,
    dark: #1c617f,
  ),

  green: (
    light: #a1e2d7,
    base: #70c1b3,
    dark: #518c82,
  ),

  yellow: (
    light: #ffe88c,
    base: #ffe066,
    dark: #d3ba54,
  ),

  red: (
    light: #ff7270,
    base: #f25f5c,
    dark: #d34845,
  ),

  ink: (
    lighter: hsl(0, 0%, 62%),
    light: hsl(0, 0%, 44%),
    base: hsl(0, 0%, 10%)
  ),

  primary: blue,
  danger: red,
  background: sky,
  header: slate,
  nav-link: white
);

$custom-color-palette-data: () !default;

/*============================================================================
  Returns the color value for a given color name and group.

  @param {String} $hue - The color's hue.
  @param {String} $value - The darkness/lightness of the color. Defaults to base.
  @param {Color} $for-background - The background color on which this color will
    appear. Applies a multiply filter to ensure appropriate contrast.
  @return {Color} The color value.
==============================================================================*/
@function color($hue, $value: base, $for-background: null) {
  $color-palette-data: map-merge($default-color-palette-data, $custom-color-palette-data);

  $fetched-color: map-get($color-palette-data, $hue);

  @if map-has-key($color-palette-data, $fetched-color) {
    $fetched-color: map-get(map-get($color-palette-data, $fetched-color), $value);
  } @else {
    $fetched-color: map-get($fetched-color, $value);
  }

  @if $for-background != null {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    @error "Color `#{$hue} - #{$value}` not found. Available colors: #{available-names($color-palette-data)}";
  }
}

/*============================================================================
  Darkens the foreground color by the background color. This is the same as the
  “multiply” filter in graphics apps.

  @param {Color} $foreground - The color to darken.
  @param {Color} $background - The background to base darkening on.
  @return {Color} The modified color.
==============================================================================*/
@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: #fff;
  }

  @return $foreground * $background / 255;
}
